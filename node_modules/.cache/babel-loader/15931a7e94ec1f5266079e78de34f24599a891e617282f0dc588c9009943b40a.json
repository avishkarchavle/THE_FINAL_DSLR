{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grish\\\\OneDrive\\\\Desktop\\\\k\\\\dslrbackup-main\\\\src\\\\components\\\\SignLanguageRecognition.js\",\n  _s = $RefreshSig$();\n// import React, { useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const SignLanguageRecognition = () => {\n//     const [videoInput, setVideoInput] = useState(null);\n//     const [prediction, setPrediction] = useState('');\n//     const [isSpeaking, setIsSpeaking] = useState(false);\n\n//     const videoRef = useRef(null);\n//     const speechSynthesisRef = useRef(window.speechSynthesis);\n//     const utteranceRef = useRef(null);\n\n//     const handleVideoChange = (event) => {\n//         const file = event.target.files[0];\n//         setVideoInput(file);\n//         console.log(\"Video file selected: \", file);\n//     };\n\n//     const handlePredict = async () => {\n//         try {\n//             const formData = new FormData();\n//             if (videoInput instanceof Blob) {\n//                 formData.append('video', videoInput, 'video.webm');\n//                 console.log(\"Video blob appended to formData\");\n//             } else {\n//                 alert('Please provide a video input');\n//                 return;\n//             }\n\n//             console.log(\"Sending request to backend...\");\n//             const response = await axios.post('http://localhost:5000/predict', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data',\n//                 },\n//             });\n\n//             console.log(\"Response received: \", response.data);\n//             setPrediction(response.data.prediction);\n//             speakText(response.data.prediction);\n//         } catch (error) {\n//             console.error('Error predicting:', error);\n//         }\n//     };\n\n//     const speakText = (text) => {\n//         utteranceRef.current = new SpeechSynthesisUtterance(text);\n//         speechSynthesisRef.current.speak(utteranceRef.current);\n//         setIsSpeaking(true);\n//     };\n\n//     const stopSpeaking = () => {\n//         if (isSpeaking) {\n//             speechSynthesisRef.current.cancel();\n//             setIsSpeaking(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"container mt-5\">\n//             <h2 className=\"display-4 mb-4\">Sign Language Recognition</h2>\n//             <div className=\"mb-3\">\n//                 <label>Upload Video:</label>\n//                 <input type=\"file\" accept=\"video/*\" onChange={handleVideoChange} />\n//             </div>\n//             <div className=\"mb-3\">\n//                 <button className=\"btn btn-success\" onClick={handlePredict}>\n//                     Predict\n//                 </button>\n//             </div>\n//             {prediction && (\n//                 <div className=\"mt-3\">\n//                     <p>Prediction: {prediction}</p>\n//                     <button\n//                         className={`btn ${isSpeaking ? 'btn-danger' : 'btn-success'}`}\n//                         onClick={() => {\n//                             if (isSpeaking) {\n//                                 stopSpeaking();\n//                             } else {\n//                                 speakText(prediction);\n//                             }\n//                         }}\n//                     >\n//                         {isSpeaking ? 'Stop Speaking' : 'Speak'}\n//                     </button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default SignLanguageRecognition;\nimport React, { useRef, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignLanguageRecognition = () => {\n  _s();\n  const [videoInput, setVideoInput] = useState(null);\n  const [predictions, setPredictions] = useState([]);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [speakingWord, setSpeakingWord] = useState('');\n  const videoRef = useRef(null);\n  const speechSynthesisRef = useRef(window.speechSynthesis);\n  const utteranceRef = useRef(null);\n  const handleVideoChange = event => {\n    const file = event.target.files[0];\n    setVideoInput(file);\n    console.log(\"Video file selected: \", file);\n  };\n  const handlePredict = async () => {\n    try {\n      const formData = new FormData();\n      if (videoInput instanceof Blob) {\n        formData.append('video', videoInput, 'video.webm');\n        console.log(\"Video blob appended to formData\");\n      } else {\n        alert('Please provide a video input');\n        return;\n      }\n      console.log(\"Sending request to backend...\");\n      const response = await axios.post('http://localhost:5000/predict', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log(\"Response received: \", response.data);\n      setPredictions(response.data.predictions); // Update this line to set predictions\n    } catch (error) {\n      console.error('Error predicting:', error);\n    }\n  };\n  const speakText = text => {\n    utteranceRef.current = new SpeechSynthesisUtterance(text);\n    speechSynthesisRef.current.speak(utteranceRef.current);\n    setIsSpeaking(true);\n  };\n  const stopSpeaking = () => {\n    if (isSpeaking) {\n      speechSynthesisRef.current.cancel();\n      setIsSpeaking(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"display-4 mb-4\",\n      children: \"Sign Language Recognition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Upload Video:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"video/*\",\n        onChange: handleVideoChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success\",\n        onClick: handlePredict,\n        children: \"Predict\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), predictions && predictions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Predicted Words:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: predictions.map((word, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `btn ${isSpeaking && speakingWord === word ? 'btn-danger' : 'btn-success'}`,\n            onClick: () => {\n              if (isSpeaking && speakingWord === word) {\n                stopSpeaking();\n              } else {\n                speakText(word);\n                setSpeakingWord(word);\n              }\n            },\n            children: isSpeaking && speakingWord === word ? 'Stop Speaking' : 'Speak'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n};\n_s(SignLanguageRecognition, \"hCW0UoI00pV4gEr2wckWUCwLkg4=\");\n_c = SignLanguageRecognition;\nexport default SignLanguageRecognition;\nvar _c;\n$RefreshReg$(_c, \"SignLanguageRecognition\");","map":{"version":3,"names":["React","useRef","useState","axios","jsxDEV","_jsxDEV","SignLanguageRecognition","_s","videoInput","setVideoInput","predictions","setPredictions","isSpeaking","setIsSpeaking","speakingWord","setSpeakingWord","videoRef","speechSynthesisRef","window","speechSynthesis","utteranceRef","handleVideoChange","event","file","target","files","console","log","handlePredict","formData","FormData","Blob","append","alert","response","post","headers","data","error","speakText","text","current","SpeechSynthesisUtterance","speak","stopSpeaking","cancel","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","length","map","word","index","_c","$RefreshReg$"],"sources":["C:/Users/grish/OneDrive/Desktop/k/dslrbackup-main/src/components/SignLanguageRecognition.js"],"sourcesContent":["// import React, { useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const SignLanguageRecognition = () => {\n//     const [videoInput, setVideoInput] = useState(null);\n//     const [prediction, setPrediction] = useState('');\n//     const [isSpeaking, setIsSpeaking] = useState(false);\n\n//     const videoRef = useRef(null);\n//     const speechSynthesisRef = useRef(window.speechSynthesis);\n//     const utteranceRef = useRef(null);\n\n//     const handleVideoChange = (event) => {\n//         const file = event.target.files[0];\n//         setVideoInput(file);\n//         console.log(\"Video file selected: \", file);\n//     };\n\n//     const handlePredict = async () => {\n//         try {\n//             const formData = new FormData();\n//             if (videoInput instanceof Blob) {\n//                 formData.append('video', videoInput, 'video.webm');\n//                 console.log(\"Video blob appended to formData\");\n//             } else {\n//                 alert('Please provide a video input');\n//                 return;\n//             }\n\n//             console.log(\"Sending request to backend...\");\n//             const response = await axios.post('http://localhost:5000/predict', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data',\n//                 },\n//             });\n\n//             console.log(\"Response received: \", response.data);\n//             setPrediction(response.data.prediction);\n//             speakText(response.data.prediction);\n//         } catch (error) {\n//             console.error('Error predicting:', error);\n//         }\n//     };\n\n//     const speakText = (text) => {\n//         utteranceRef.current = new SpeechSynthesisUtterance(text);\n//         speechSynthesisRef.current.speak(utteranceRef.current);\n//         setIsSpeaking(true);\n//     };\n\n//     const stopSpeaking = () => {\n//         if (isSpeaking) {\n//             speechSynthesisRef.current.cancel();\n//             setIsSpeaking(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"container mt-5\">\n//             <h2 className=\"display-4 mb-4\">Sign Language Recognition</h2>\n//             <div className=\"mb-3\">\n//                 <label>Upload Video:</label>\n//                 <input type=\"file\" accept=\"video/*\" onChange={handleVideoChange} />\n//             </div>\n//             <div className=\"mb-3\">\n//                 <button className=\"btn btn-success\" onClick={handlePredict}>\n//                     Predict\n//                 </button>\n//             </div>\n//             {prediction && (\n//                 <div className=\"mt-3\">\n//                     <p>Prediction: {prediction}</p>\n//                     <button\n//                         className={`btn ${isSpeaking ? 'btn-danger' : 'btn-success'}`}\n//                         onClick={() => {\n//                             if (isSpeaking) {\n//                                 stopSpeaking();\n//                             } else {\n//                                 speakText(prediction);\n//                             }\n//                         }}\n//                     >\n//                         {isSpeaking ? 'Stop Speaking' : 'Speak'}\n//                     </button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default SignLanguageRecognition;\nimport React, { useRef, useState } from 'react';\nimport axios from 'axios';\n\nconst SignLanguageRecognition = () => {\n    const [videoInput, setVideoInput] = useState(null);\n    const [predictions, setPredictions] = useState([]);\n    const [isSpeaking, setIsSpeaking] = useState(false);\n    const [speakingWord, setSpeakingWord] = useState('');\n\n    const videoRef = useRef(null);\n    const speechSynthesisRef = useRef(window.speechSynthesis);\n    const utteranceRef = useRef(null);\n\n    const handleVideoChange = (event) => {\n        const file = event.target.files[0];\n        setVideoInput(file);\n        console.log(\"Video file selected: \", file);\n    };\n\n    const handlePredict = async () => {\n        try {\n            const formData = new FormData();\n            if (videoInput instanceof Blob) {\n                formData.append('video', videoInput, 'video.webm');\n                console.log(\"Video blob appended to formData\");\n            } else {\n                alert('Please provide a video input');\n                return;\n            }\n    \n            console.log(\"Sending request to backend...\");\n            const response = await axios.post('http://localhost:5000/predict', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            });\n    \n            console.log(\"Response received: \", response.data);\n            setPredictions(response.data.predictions); // Update this line to set predictions\n        } catch (error) {\n            console.error('Error predicting:', error);\n        }\n    };\n    \n\n    const speakText = (text) => {\n        utteranceRef.current = new SpeechSynthesisUtterance(text);\n        speechSynthesisRef.current.speak(utteranceRef.current);\n        setIsSpeaking(true);\n    };\n\n    const stopSpeaking = () => {\n        if (isSpeaking) {\n            speechSynthesisRef.current.cancel();\n            setIsSpeaking(false);\n        }\n    };\n\n    return (\n        <div className=\"container mt-5\">\n            <h2 className=\"display-4 mb-4\">Sign Language Recognition</h2>\n            <div className=\"mb-3\">\n                <label>Upload Video:</label>\n                <input type=\"file\" accept=\"video/*\" onChange={handleVideoChange} />\n            </div>\n            <div className=\"mb-3\">\n                <button className=\"btn btn-success\" onClick={handlePredict}>\n                    Predict\n                </button>\n            </div>\n            {predictions && predictions.length > 0 && (\n                <div className=\"mt-3\">\n                    <p>Predicted Words:</p>\n                    <ul>\n                        {predictions.map((word, index) => (\n                            <li key={index}>\n                                <button\n                                    className={`btn ${isSpeaking && speakingWord === word ? 'btn-danger' : 'btn-success'}`}\n                                    onClick={() => {\n                                        if (isSpeaking && speakingWord === word) {\n                                            stopSpeaking();\n                                        } else {\n                                            speakText(word);\n                                            setSpeakingWord(word);\n                                        }\n                                    }}\n                                >\n                                    {isSpeaking && speakingWord === word ? 'Stop Speaking' : 'Speak'}\n                                </button>\n                                <span>{word}</span>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default SignLanguageRecognition;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}