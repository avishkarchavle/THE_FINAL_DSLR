{"ast":null,"code":"// import React, { useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const SignLanguageRecognition = () => {\n//     const [videoInput, setVideoInput] = useState(null);\n//     const [prediction, setPrediction] = useState('');\n//     const [isSpeaking, setIsSpeaking] = useState(false);\n\n//     const videoRef = useRef(null);\n//     const speechSynthesisRef = useRef(window.speechSynthesis);\n//     const utteranceRef = useRef(null);\n\n//     const handleVideoChange = (event) => {\n//         const file = event.target.files[0];\n//         setVideoInput(file);\n//         console.log(\"Video file selected: \", file);\n//     };\n\n//     const handlePredict = async () => {\n//         try {\n//             const formData = new FormData();\n//             if (videoInput instanceof Blob) {\n//                 formData.append('video', videoInput, 'video.webm');\n//                 console.log(\"Video blob appended to formData\");\n//             } else {\n//                 alert('Please provide a video input');\n//                 return;\n//             }\n\n//             console.log(\"Sending request to backend...\");\n//             const response = await axios.post('http://localhost:5000/predict', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data',\n//                 },\n//             });\n\n//             console.log(\"Response received: \", response.data);\n//             setPrediction(response.data.prediction);\n//             speakText(response.data.prediction);\n//         } catch (error) {\n//             console.error('Error predicting:', error);\n//         }\n//     };\n\n//     const speakText = (text) => {\n//         utteranceRef.current = new SpeechSynthesisUtterance(text);\n//         speechSynthesisRef.current.speak(utteranceRef.current);\n//         setIsSpeaking(true);\n//     };\n\n//     const stopSpeaking = () => {\n//         if (isSpeaking) {\n//             speechSynthesisRef.current.cancel();\n//             setIsSpeaking(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"container mt-5\">\n//             <h2 className=\"display-4 mb-4\">Sign Language Recognition</h2>\n//             <div className=\"mb-3\">\n//                 <label>Upload Video:</label>\n//                 <input type=\"file\" accept=\"video/*\" onChange={handleVideoChange} />\n//             </div>\n//             <div className=\"mb-3\">\n//                 <button className=\"btn btn-success\" onClick={handlePredict}>\n//                     Predict\n//                 </button>\n//             </div>\n//             {prediction && (\n//                 <div className=\"mt-3\">\n//                     <p>Prediction: {prediction}</p>\n//                     <button\n//                         className={`btn ${isSpeaking ? 'btn-danger' : 'btn-success'}`}\n//                         onClick={() => {\n//                             if (isSpeaking) {\n//                                 stopSpeaking();\n//                             } else {\n//                                 speakText(prediction);\n//                             }\n//                         }}\n//                     >\n//                         {isSpeaking ? 'Stop Speaking' : 'Speak'}\n//                     </button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default SignLanguageRecognition;\nconst handlePredict = async () => {\n  try {\n    const formData = new FormData();\n    if (videoInput instanceof Blob) {\n      formData.append('video', videoInput, 'video.webm');\n      console.log(\"Video blob appended to formData\");\n    } else {\n      alert('Please provide a video input');\n      return;\n    }\n    console.log(\"Sending request to backend...\");\n    const response = await axios.post('http://localhost:5000/predict', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    console.log(\"Response received: \", response.data);\n    const predictedWords = response.data; // Update to use the direct response data\n    setPredictions(predictedWords); // Update this line to set predictions\n    speakPredictions(predictedWords); // Speak the predicted words\n  } catch (error) {\n    console.error('Error predicting:', error);\n  }\n};","map":{"version":3,"names":["handlePredict","formData","FormData","videoInput","Blob","append","console","log","alert","response","axios","post","headers","data","predictedWords","setPredictions","speakPredictions","error"],"sources":["C:/Users/grish/OneDrive/Desktop/k/dslrbackup-main/src/components/SignLanguageRecognition.js"],"sourcesContent":["// import React, { useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const SignLanguageRecognition = () => {\n//     const [videoInput, setVideoInput] = useState(null);\n//     const [prediction, setPrediction] = useState('');\n//     const [isSpeaking, setIsSpeaking] = useState(false);\n\n//     const videoRef = useRef(null);\n//     const speechSynthesisRef = useRef(window.speechSynthesis);\n//     const utteranceRef = useRef(null);\n\n//     const handleVideoChange = (event) => {\n//         const file = event.target.files[0];\n//         setVideoInput(file);\n//         console.log(\"Video file selected: \", file);\n//     };\n\n//     const handlePredict = async () => {\n//         try {\n//             const formData = new FormData();\n//             if (videoInput instanceof Blob) {\n//                 formData.append('video', videoInput, 'video.webm');\n//                 console.log(\"Video blob appended to formData\");\n//             } else {\n//                 alert('Please provide a video input');\n//                 return;\n//             }\n\n//             console.log(\"Sending request to backend...\");\n//             const response = await axios.post('http://localhost:5000/predict', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data',\n//                 },\n//             });\n\n//             console.log(\"Response received: \", response.data);\n//             setPrediction(response.data.prediction);\n//             speakText(response.data.prediction);\n//         } catch (error) {\n//             console.error('Error predicting:', error);\n//         }\n//     };\n\n//     const speakText = (text) => {\n//         utteranceRef.current = new SpeechSynthesisUtterance(text);\n//         speechSynthesisRef.current.speak(utteranceRef.current);\n//         setIsSpeaking(true);\n//     };\n\n//     const stopSpeaking = () => {\n//         if (isSpeaking) {\n//             speechSynthesisRef.current.cancel();\n//             setIsSpeaking(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"container mt-5\">\n//             <h2 className=\"display-4 mb-4\">Sign Language Recognition</h2>\n//             <div className=\"mb-3\">\n//                 <label>Upload Video:</label>\n//                 <input type=\"file\" accept=\"video/*\" onChange={handleVideoChange} />\n//             </div>\n//             <div className=\"mb-3\">\n//                 <button className=\"btn btn-success\" onClick={handlePredict}>\n//                     Predict\n//                 </button>\n//             </div>\n//             {prediction && (\n//                 <div className=\"mt-3\">\n//                     <p>Prediction: {prediction}</p>\n//                     <button\n//                         className={`btn ${isSpeaking ? 'btn-danger' : 'btn-success'}`}\n//                         onClick={() => {\n//                             if (isSpeaking) {\n//                                 stopSpeaking();\n//                             } else {\n//                                 speakText(prediction);\n//                             }\n//                         }}\n//                     >\n//                         {isSpeaking ? 'Stop Speaking' : 'Speak'}\n//                     </button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default SignLanguageRecognition;\nconst handlePredict = async () => {\n    try {\n        const formData = new FormData();\n        if (videoInput instanceof Blob) {\n            formData.append('video', videoInput, 'video.webm');\n            console.log(\"Video blob appended to formData\");\n        } else {\n            alert('Please provide a video input');\n            return;\n        }\n\n        console.log(\"Sending request to backend...\");\n        const response = await axios.post('http://localhost:5000/predict', formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        });\n\n        console.log(\"Response received: \", response.data);\n        const predictedWords = response.data; // Update to use the direct response data\n        setPredictions(predictedWords); // Update this line to set predictions\n        speakPredictions(predictedWords); // Speak the predicted words\n    } catch (error) {\n        console.error('Error predicting:', error);\n    }\n};\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,aAAa,GAAG,MAAAA,CAAA,KAAY;EAC9B,IAAI;IACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/B,IAAIC,UAAU,YAAYC,IAAI,EAAE;MAC5BH,QAAQ,CAACI,MAAM,CAAC,OAAO,EAAEF,UAAU,EAAE,YAAY,CAAC;MAClDG,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAClD,CAAC,MAAM;MACHC,KAAK,CAAC,8BAA8B,CAAC;MACrC;IACJ;IAEAF,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5C,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,+BAA+B,EAAEV,QAAQ,EAAE;MACzEW,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IAEFN,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEE,QAAQ,CAACI,IAAI,CAAC;IACjD,MAAMC,cAAc,GAAGL,QAAQ,CAACI,IAAI,CAAC,CAAC;IACtCE,cAAc,CAACD,cAAc,CAAC,CAAC,CAAC;IAChCE,gBAAgB,CAACF,cAAc,CAAC,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZX,OAAO,CAACW,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;EAC7C;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}