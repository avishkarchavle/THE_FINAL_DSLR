{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grish\\\\OneDrive\\\\Desktop\\\\k\\\\dslrbackup-main\\\\src\\\\components\\\\SignLanguageRecognition.js\",\n  _s = $RefreshSig$();\n// import React, { useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const SignLanguageRecognition = () => {\n//     const [videoInput, setVideoInput] = useState(null);\n//     const [prediction, setPrediction] = useState('');\n//     const [isSpeaking, setIsSpeaking] = useState(false);\n\n//     const videoRef = useRef(null);\n//     const speechSynthesisRef = useRef(window.speechSynthesis);\n//     const utteranceRef = useRef(null);\n\n//     const handleVideoChange = (event) => {\n//         const file = event.target.files[0];\n//         setVideoInput(file);\n//         console.log(\"Video file selected: \", file);\n//     };\n\n//     const handlePredict = async () => {\n//         try {\n//             const formData = new FormData();\n//             if (videoInput instanceof Blob) {\n//                 formData.append('video', videoInput, 'video.webm');\n//                 console.log(\"Video blob appended to formData\");\n//             } else {\n//                 alert('Please provide a video input');\n//                 return;\n//             }\n\n//             console.log(\"Sending request to backend...\");\n//             const response = await axios.post('http://localhost:5000/predict', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data',\n//                 },\n//             });\n\n//             console.log(\"Response received: \", response.data);\n//             setPrediction(response.data.prediction);\n//             speakText(response.data.prediction);\n//         } catch (error) {\n//             console.error('Error predicting:', error);\n//         }\n//     };\n\n//     const speakText = (text) => {\n//         utteranceRef.current = new SpeechSynthesisUtterance(text);\n//         speechSynthesisRef.current.speak(utteranceRef.current);\n//         setIsSpeaking(true);\n//     };\n\n//     const stopSpeaking = () => {\n//         if (isSpeaking) {\n//             speechSynthesisRef.current.cancel();\n//             setIsSpeaking(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"container mt-5\">\n//             <h2 className=\"display-4 mb-4\">Sign Language Recognition</h2>\n//             <div className=\"mb-3\">\n//                 <label>Upload Video:</label>\n//                 <input type=\"file\" accept=\"video/*\" onChange={handleVideoChange} />\n//             </div>\n//             <div className=\"mb-3\">\n//                 <button className=\"btn btn-success\" onClick={handlePredict}>\n//                     Predict\n//                 </button>\n//             </div>\n//             {prediction && (\n//                 <div className=\"mt-3\">\n//                     <p>Prediction: {prediction}</p>\n//                     <button\n//                         className={`btn ${isSpeaking ? 'btn-danger' : 'btn-success'}`}\n//                         onClick={() => {\n//                             if (isSpeaking) {\n//                                 stopSpeaking();\n//                             } else {\n//                                 speakText(prediction);\n//                             }\n//                         }}\n//                     >\n//                         {isSpeaking ? 'Stop Speaking' : 'Speak'}\n//                     </button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default SignLanguageRecognition;\n// import React, { useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const SignLanguageRecognition = () => {\n//     const [videoInput, setVideoInput] = useState(null);\n//     const [predictions, setPredictions] = useState([]);\n//     const [isSpeaking, setIsSpeaking] = useState(false);\n\n//     const videoRef = useRef(null);\n//     const speechSynthesisRef = useRef(window.speechSynthesis);\n//     const utteranceRef = useRef(null);\n\n//     const handleVideoChange = (event) => {\n//         const file = event.target.files[0];\n//         setVideoInput(file);\n//         console.log(\"Video file selected: \", file);\n//     };\n\n//     const handlePredict = async () => {\n//         try {\n//             const formData = new FormData();\n//             if (videoInput instanceof Blob) {\n//                 formData.append('video', videoInput, 'video.webm');\n//                 console.log(\"Video blob appended to formData\");\n//             } else {\n//                 alert('Please provide a video input');\n//                 return;\n//             }\n\n//             console.log(\"Sending request to backend...\");\n//             const response = await axios.post('http://localhost:5000/predict', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data',\n//                 },\n//             });\n\n//             console.log(\"Response received: \", response.data);\n//             setPredictions(response.data); // Update predictions with response data\n//             speakPredictions(response.data); // Speak the predicted words\n//         } catch (error) {\n//             console.error('Error predicting:', error);\n//         }\n//     };\n\n//     const speakPredictions = (predictions) => {\n//         if (predictions && predictions.length > 0) {\n//             predictions.forEach((prediction) => {\n//                 speakText(prediction);\n//             });\n//         }\n//     };\n\n//     const speakText = (text) => {\n//         utteranceRef.current = new SpeechSynthesisUtterance(text);\n//         speechSynthesisRef.current.speak(utteranceRef.current);\n//         setIsSpeaking(true);\n//     };\n\n//     const stopSpeaking = () => {\n//         if (isSpeaking) {\n//             speechSynthesisRef.current.cancel();\n//             setIsSpeaking(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"container mt-5\">\n//             <h2 className=\"display-4 mb-4\">Sign Language Recognition</h2>\n//             <div className=\"mb-3\">\n//                 <label>Upload Video:</label>\n//                 <input type=\"file\" accept=\"video/*\" onChange={handleVideoChange} />\n//             </div>\n//             <div className=\"mb-3\">\n//                 <button className=\"btn btn-success\" onClick={handlePredict}>\n//                     Predict\n//                 </button>\n//             </div>\n//             {predictions && predictions.length > 0 && (\n//                 <div className=\"mt-3\">\n//                     <p>Predicted Words:</p>\n//                     <ul>\n//                         {predictions.map((word, index) => (\n//                             <li key={index}>{word}</li>\n//                         ))}\n//                     </ul>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default SignLanguageRecognition;\nimport React, { useRef, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignLanguageRecognition = () => {\n  _s();\n  const [videoInput, setVideoInput] = useState(null);\n  const [predictions, setPredictions] = useState([]);\n  const [selectedWord, setSelectedWord] = useState('');\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const videoRef = useRef(null);\n  const speechSynthesisRef = useRef(window.speechSynthesis);\n  const utteranceRef = useRef(null);\n  const handleVideoChange = event => {\n    const file = event.target.files[0];\n    setVideoInput(file);\n    console.log(\"Video file selected: \", file);\n  };\n  const handlePredict = async () => {\n    try {\n      const formData = new FormData();\n      if (videoInput instanceof Blob) {\n        formData.append('video', videoInput, 'video.webm');\n        console.log(\"Video blob appended to formData\");\n      } else {\n        alert('Please provide a video input');\n        return;\n      }\n      console.log(\"Sending request to backend...\");\n      const response = await axios.post('http://localhost:5000/predict', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log(\"Response received: \", response.data);\n      setPredictions(response.data); // Update predictions with response data\n    } catch (error) {\n      console.error('Error predicting:', error);\n    }\n  };\n  const speakWord = () => {\n    if (selectedWord) {\n      speakText(selectedWord);\n    }\n  };\n  const speakText = text => {\n    utteranceRef.current = new SpeechSynthesisUtterance(text);\n    speechSynthesisRef.current.speak(utteranceRef.current);\n    setIsSpeaking(true);\n  };\n  const stopSpeaking = () => {\n    if (isSpeaking) {\n      speechSynthesisRef.current.cancel();\n      setIsSpeaking(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: '50px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        marginBottom: '20px',\n        fontSize: '24px'\n      },\n      children: \"Sign Language Recognition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          marginRight: '10px'\n        },\n        children: \"Upload Video:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"video/*\",\n        onChange: handleVideoChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: '#28a745',\n          color: 'white',\n          border: 'none',\n          padding: '8px 16px',\n          borderRadius: '5px'\n        },\n        onClick: handlePredict,\n        children: \"Predict\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this), predictions && predictions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: '18px',\n          fontWeight: 'bold'\n        },\n        children: \"Predicted Words:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          listStyleType: 'none',\n          padding: '0'\n        },\n        children: predictions.map((word, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            marginBottom: '5px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              backgroundColor: selectedWord === word ? '#007bff' : 'transparent',\n              color: selectedWord === word ? 'white' : '#007bff',\n              border: 'none',\n              cursor: 'pointer',\n              padding: '5px 10px',\n              borderRadius: '5px'\n            },\n            onClick: () => setSelectedWord(word),\n            children: word\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: isSpeaking ? '#dc3545' : '#28a745',\n          color: 'white',\n          border: 'none',\n          padding: '8px 16px',\n          borderRadius: '5px'\n        },\n        onClick: isSpeaking ? stopSpeaking : speakWord,\n        disabled: !selectedWord,\n        children: isSpeaking ? 'Stop Speaking' : 'Speak'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 9\n  }, this);\n};\n_s(SignLanguageRecognition, \"9um5i5DxXL2b+BgDgc61IvUzyVQ=\");\n_c = SignLanguageRecognition;\nexport default SignLanguageRecognition;\nvar _c;\n$RefreshReg$(_c, \"SignLanguageRecognition\");","map":{"version":3,"names":["React","useRef","useState","axios","jsxDEV","_jsxDEV","SignLanguageRecognition","_s","videoInput","setVideoInput","predictions","setPredictions","selectedWord","setSelectedWord","isSpeaking","setIsSpeaking","videoRef","speechSynthesisRef","window","speechSynthesis","utteranceRef","handleVideoChange","event","file","target","files","console","log","handlePredict","formData","FormData","Blob","append","alert","response","post","headers","data","error","speakWord","speakText","text","current","SpeechSynthesisUtterance","speak","stopSpeaking","cancel","style","marginTop","children","marginBottom","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","marginRight","type","accept","onChange","backgroundColor","color","border","padding","borderRadius","onClick","length","fontWeight","listStyleType","map","word","index","cursor","disabled","_c","$RefreshReg$"],"sources":["C:/Users/grish/OneDrive/Desktop/k/dslrbackup-main/src/components/SignLanguageRecognition.js"],"sourcesContent":["// import React, { useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const SignLanguageRecognition = () => {\n//     const [videoInput, setVideoInput] = useState(null);\n//     const [prediction, setPrediction] = useState('');\n//     const [isSpeaking, setIsSpeaking] = useState(false);\n\n//     const videoRef = useRef(null);\n//     const speechSynthesisRef = useRef(window.speechSynthesis);\n//     const utteranceRef = useRef(null);\n\n//     const handleVideoChange = (event) => {\n//         const file = event.target.files[0];\n//         setVideoInput(file);\n//         console.log(\"Video file selected: \", file);\n//     };\n\n//     const handlePredict = async () => {\n//         try {\n//             const formData = new FormData();\n//             if (videoInput instanceof Blob) {\n//                 formData.append('video', videoInput, 'video.webm');\n//                 console.log(\"Video blob appended to formData\");\n//             } else {\n//                 alert('Please provide a video input');\n//                 return;\n//             }\n\n//             console.log(\"Sending request to backend...\");\n//             const response = await axios.post('http://localhost:5000/predict', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data',\n//                 },\n//             });\n\n//             console.log(\"Response received: \", response.data);\n//             setPrediction(response.data.prediction);\n//             speakText(response.data.prediction);\n//         } catch (error) {\n//             console.error('Error predicting:', error);\n//         }\n//     };\n\n//     const speakText = (text) => {\n//         utteranceRef.current = new SpeechSynthesisUtterance(text);\n//         speechSynthesisRef.current.speak(utteranceRef.current);\n//         setIsSpeaking(true);\n//     };\n\n//     const stopSpeaking = () => {\n//         if (isSpeaking) {\n//             speechSynthesisRef.current.cancel();\n//             setIsSpeaking(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"container mt-5\">\n//             <h2 className=\"display-4 mb-4\">Sign Language Recognition</h2>\n//             <div className=\"mb-3\">\n//                 <label>Upload Video:</label>\n//                 <input type=\"file\" accept=\"video/*\" onChange={handleVideoChange} />\n//             </div>\n//             <div className=\"mb-3\">\n//                 <button className=\"btn btn-success\" onClick={handlePredict}>\n//                     Predict\n//                 </button>\n//             </div>\n//             {prediction && (\n//                 <div className=\"mt-3\">\n//                     <p>Prediction: {prediction}</p>\n//                     <button\n//                         className={`btn ${isSpeaking ? 'btn-danger' : 'btn-success'}`}\n//                         onClick={() => {\n//                             if (isSpeaking) {\n//                                 stopSpeaking();\n//                             } else {\n//                                 speakText(prediction);\n//                             }\n//                         }}\n//                     >\n//                         {isSpeaking ? 'Stop Speaking' : 'Speak'}\n//                     </button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default SignLanguageRecognition;\n// import React, { useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const SignLanguageRecognition = () => {\n//     const [videoInput, setVideoInput] = useState(null);\n//     const [predictions, setPredictions] = useState([]);\n//     const [isSpeaking, setIsSpeaking] = useState(false);\n\n//     const videoRef = useRef(null);\n//     const speechSynthesisRef = useRef(window.speechSynthesis);\n//     const utteranceRef = useRef(null);\n\n//     const handleVideoChange = (event) => {\n//         const file = event.target.files[0];\n//         setVideoInput(file);\n//         console.log(\"Video file selected: \", file);\n//     };\n\n//     const handlePredict = async () => {\n//         try {\n//             const formData = new FormData();\n//             if (videoInput instanceof Blob) {\n//                 formData.append('video', videoInput, 'video.webm');\n//                 console.log(\"Video blob appended to formData\");\n//             } else {\n//                 alert('Please provide a video input');\n//                 return;\n//             }\n\n//             console.log(\"Sending request to backend...\");\n//             const response = await axios.post('http://localhost:5000/predict', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data',\n//                 },\n//             });\n\n//             console.log(\"Response received: \", response.data);\n//             setPredictions(response.data); // Update predictions with response data\n//             speakPredictions(response.data); // Speak the predicted words\n//         } catch (error) {\n//             console.error('Error predicting:', error);\n//         }\n//     };\n\n//     const speakPredictions = (predictions) => {\n//         if (predictions && predictions.length > 0) {\n//             predictions.forEach((prediction) => {\n//                 speakText(prediction);\n//             });\n//         }\n//     };\n\n//     const speakText = (text) => {\n//         utteranceRef.current = new SpeechSynthesisUtterance(text);\n//         speechSynthesisRef.current.speak(utteranceRef.current);\n//         setIsSpeaking(true);\n//     };\n\n//     const stopSpeaking = () => {\n//         if (isSpeaking) {\n//             speechSynthesisRef.current.cancel();\n//             setIsSpeaking(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"container mt-5\">\n//             <h2 className=\"display-4 mb-4\">Sign Language Recognition</h2>\n//             <div className=\"mb-3\">\n//                 <label>Upload Video:</label>\n//                 <input type=\"file\" accept=\"video/*\" onChange={handleVideoChange} />\n//             </div>\n//             <div className=\"mb-3\">\n//                 <button className=\"btn btn-success\" onClick={handlePredict}>\n//                     Predict\n//                 </button>\n//             </div>\n//             {predictions && predictions.length > 0 && (\n//                 <div className=\"mt-3\">\n//                     <p>Predicted Words:</p>\n//                     <ul>\n//                         {predictions.map((word, index) => (\n//                             <li key={index}>{word}</li>\n//                         ))}\n//                     </ul>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default SignLanguageRecognition;\nimport React, { useRef, useState } from 'react';\nimport axios from 'axios';\n\nconst SignLanguageRecognition = () => {\n    const [videoInput, setVideoInput] = useState(null);\n    const [predictions, setPredictions] = useState([]);\n    const [selectedWord, setSelectedWord] = useState('');\n    const [isSpeaking, setIsSpeaking] = useState(false);\n\n    const videoRef = useRef(null);\n    const speechSynthesisRef = useRef(window.speechSynthesis);\n    const utteranceRef = useRef(null);\n\n    const handleVideoChange = (event) => {\n        const file = event.target.files[0];\n        setVideoInput(file);\n        console.log(\"Video file selected: \", file);\n    };\n\n    const handlePredict = async () => {\n        try {\n            const formData = new FormData();\n            if (videoInput instanceof Blob) {\n                formData.append('video', videoInput, 'video.webm');\n                console.log(\"Video blob appended to formData\");\n            } else {\n                alert('Please provide a video input');\n                return;\n            }\n\n            console.log(\"Sending request to backend...\");\n            const response = await axios.post('http://localhost:5000/predict', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            });\n\n            console.log(\"Response received: \", response.data);\n            setPredictions(response.data); // Update predictions with response data\n        } catch (error) {\n            console.error('Error predicting:', error);\n        }\n    };\n\n    const speakWord = () => {\n        if (selectedWord) {\n            speakText(selectedWord);\n        }\n    };\n\n    const speakText = (text) => {\n        utteranceRef.current = new SpeechSynthesisUtterance(text);\n        speechSynthesisRef.current.speak(utteranceRef.current);\n        setIsSpeaking(true);\n    };\n\n    const stopSpeaking = () => {\n        if (isSpeaking) {\n            speechSynthesisRef.current.cancel();\n            setIsSpeaking(false);\n        }\n    };\n\n    return (\n        <div style={{ marginTop: '50px' }}>\n            <h2 style={{ marginBottom: '20px', fontSize: '24px' }}>Sign Language Recognition</h2>\n            <div style={{ marginBottom: '20px' }}>\n                <label style={{ marginRight: '10px' }}>Upload Video:</label>\n                <input type=\"file\" accept=\"video/*\" onChange={handleVideoChange} />\n            </div>\n            <div style={{ marginBottom: '20px' }}>\n                <button style={{ backgroundColor: '#28a745', color: 'white', border: 'none', padding: '8px 16px', borderRadius: '5px' }} onClick={handlePredict}>\n                    Predict\n                </button>\n            </div>\n            {predictions && predictions.length > 0 && (\n                <div style={{ marginBottom: '20px' }}>\n                    <p style={{ fontSize: '18px', fontWeight: 'bold' }}>Predicted Words:</p>\n                    <ul style={{ listStyleType: 'none', padding: '0' }}>\n                        {predictions.map((word, index) => (\n                            <li key={index} style={{ marginBottom: '5px' }}>\n                                <button\n                                    style={{ backgroundColor: selectedWord === word ? '#007bff' : 'transparent', color: selectedWord === word ? 'white' : '#007bff', border: 'none', cursor: 'pointer', padding: '5px 10px', borderRadius: '5px' }}\n                                    onClick={() => setSelectedWord(word)}\n                                >\n                                    {word}\n                                </button>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n            <div>\n                <button\n                    style={{ backgroundColor: isSpeaking ? '#dc3545' : '#28a745', color: 'white', border: 'none', padding: '8px 16px', borderRadius: '5px' }}\n                    onClick={isSpeaking ? stopSpeaking : speakWord}\n                    disabled={!selectedWord}\n                >\n                    {isSpeaking ? 'Stop Speaking' : 'Speak'}\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default SignLanguageRecognition;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACY,UAAU,EAAEC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}