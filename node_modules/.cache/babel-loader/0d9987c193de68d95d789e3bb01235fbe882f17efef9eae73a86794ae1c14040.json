{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\grish\\\\OneDrive\\\\Desktop\\\\k\\\\dslrbackup-main\\\\src\\\\components\\\\SignLanguageRecognition.js\",\n  _s = $RefreshSig$();\n// import React, { useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const SignLanguageRecognition = () => {\n//     const [videoInput, setVideoInput] = useState(null);\n//     const [prediction, setPrediction] = useState('');\n//     const [isSpeaking, setIsSpeaking] = useState(false);\n\n//     const videoRef = useRef(null);\n//     const speechSynthesisRef = useRef(window.speechSynthesis);\n//     const utteranceRef = useRef(null);\n\n//     const handleVideoChange = (event) => {\n//         const file = event.target.files[0];\n//         setVideoInput(file);\n//         console.log(\"Video file selected: \", file);\n//     };\n\n//     const handlePredict = async () => {\n//         try {\n//             const formData = new FormData();\n//             if (videoInput instanceof Blob) {\n//                 formData.append('video', videoInput, 'video.webm');\n//                 console.log(\"Video blob appended to formData\");\n//             } else {\n//                 alert('Please provide a video input');\n//                 return;\n//             }\n\n//             console.log(\"Sending request to backend...\");\n//             const response = await axios.post('http://localhost:5000/predict', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data',\n//                 },\n//             });\n\n//             console.log(\"Response received: \", response.data);\n//             setPrediction(response.data.prediction);\n//             speakText(response.data.prediction);\n//         } catch (error) {\n//             console.error('Error predicting:', error);\n//         }\n//     };\n\n//     const speakText = (text) => {\n//         utteranceRef.current = new SpeechSynthesisUtterance(text);\n//         speechSynthesisRef.current.speak(utteranceRef.current);\n//         setIsSpeaking(true);\n//     };\n\n//     const stopSpeaking = () => {\n//         if (isSpeaking) {\n//             speechSynthesisRef.current.cancel();\n//             setIsSpeaking(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"container mt-5\">\n//             <h2 className=\"display-4 mb-4\">Sign Language Recognition</h2>\n//             <div className=\"mb-3\">\n//                 <label>Upload Video:</label>\n//                 <input type=\"file\" accept=\"video/*\" onChange={handleVideoChange} />\n//             </div>\n//             <div className=\"mb-3\">\n//                 <button className=\"btn btn-success\" onClick={handlePredict}>\n//                     Predict\n//                 </button>\n//             </div>\n//             {prediction && (\n//                 <div className=\"mt-3\">\n//                     <p>Prediction: {prediction}</p>\n//                     <button\n//                         className={`btn ${isSpeaking ? 'btn-danger' : 'btn-success'}`}\n//                         onClick={() => {\n//                             if (isSpeaking) {\n//                                 stopSpeaking();\n//                             } else {\n//                                 speakText(prediction);\n//                             }\n//                         }}\n//                     >\n//                         {isSpeaking ? 'Stop Speaking' : 'Speak'}\n//                     </button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default SignLanguageRecognition;\n// import React, { useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const SignLanguageRecognition = () => {\n//     const [videoInput, setVideoInput] = useState(null);\n//     const [predictions, setPredictions] = useState([]);\n//     const [isSpeaking, setIsSpeaking] = useState(false);\n\n//     const videoRef = useRef(null);\n//     const speechSynthesisRef = useRef(window.speechSynthesis);\n//     const utteranceRef = useRef(null);\n\n//     const handleVideoChange = (event) => {\n//         const file = event.target.files[0];\n//         setVideoInput(file);\n//         console.log(\"Video file selected: \", file);\n//     };\n\n//     const handlePredict = async () => {\n//         try {\n//             const formData = new FormData();\n//             if (videoInput instanceof Blob) {\n//                 formData.append('video', videoInput, 'video.webm');\n//                 console.log(\"Video blob appended to formData\");\n//             } else {\n//                 alert('Please provide a video input');\n//                 return;\n//             }\n\n//             console.log(\"Sending request to backend...\");\n//             const response = await axios.post('http://localhost:5000/predict', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data',\n//                 },\n//             });\n\n//             console.log(\"Response received: \", response.data);\n//             setPredictions(response.data); // Update predictions with response data\n//             speakPredictions(response.data); // Speak the predicted words\n//         } catch (error) {\n//             console.error('Error predicting:', error);\n//         }\n//     };\n\n//     const speakPredictions = (predictions) => {\n//         if (predictions && predictions.length > 0) {\n//             predictions.forEach((prediction) => {\n//                 speakText(prediction);\n//             });\n//         }\n//     };\n\n//     const speakText = (text) => {\n//         utteranceRef.current = new SpeechSynthesisUtterance(text);\n//         speechSynthesisRef.current.speak(utteranceRef.current);\n//         setIsSpeaking(true);\n//     };\n\n//     const stopSpeaking = () => {\n//         if (isSpeaking) {\n//             speechSynthesisRef.current.cancel();\n//             setIsSpeaking(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"container mt-5\">\n//             <h2 className=\"display-4 mb-4\">Sign Language Recognition</h2>\n//             <div className=\"mb-3\">\n//                 <label>Upload Video:</label>\n//                 <input type=\"file\" accept=\"video/*\" onChange={handleVideoChange} />\n//             </div>\n//             <div className=\"mb-3\">\n//                 <button className=\"btn btn-success\" onClick={handlePredict}>\n//                     Predict\n//                 </button>\n//             </div>\n//             {predictions && predictions.length > 0 && (\n//                 <div className=\"mt-3\">\n//                     <p>Predicted Words:</p>\n//                     <ul>\n//                         {predictions.map((word, index) => (\n//                             <li key={index}>{word}</li>\n//                         ))}\n//                     </ul>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default SignLanguageRecognition;\nimport React, { useRef, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignLanguageRecognition = () => {\n  _s();\n  const [videoInput, setVideoInput] = useState(null);\n  const [predictions, setPredictions] = useState([]);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [selectedWord, setSelectedWord] = useState('');\n  const videoRef = useRef(null);\n  const speechSynthesisRef = useRef(window.speechSynthesis);\n  const utteranceRef = useRef(null);\n  const handleVideoChange = event => {\n    const file = event.target.files[0];\n    setVideoInput(file);\n    console.log(\"Video file selected: \", file);\n  };\n  const handlePredict = async () => {\n    try {\n      const formData = new FormData();\n      if (videoInput instanceof Blob) {\n        formData.append('video', videoInput, 'video.webm');\n        console.log(\"Video blob appended to formData\");\n      } else {\n        alert('Please provide a video input');\n        return;\n      }\n      console.log(\"Sending request to backend...\");\n      const response = await axios.post('http://localhost:5000/predict', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log(\"Response received: \", response.data);\n      setPredictions(response.data.predictions);\n    } catch (error) {\n      console.error('Error predicting:', error);\n    }\n  };\n  const speakText = text => {\n    utteranceRef.current = new SpeechSynthesisUtterance(text);\n    speechSynthesisRef.current.speak(utteranceRef.current);\n    setIsSpeaking(true);\n  };\n  const stopSpeaking = () => {\n    if (isSpeaking) {\n      speechSynthesisRef.current.cancel();\n      setIsSpeaking(false);\n    }\n  };\n  const handleWordClick = word => {\n    setSelectedWord(word);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: '20px',\n      marginLeft: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: \"Sign Language Recognition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Upload Video:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"video/*\",\n        onChange: handleVideoChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: '#5cb85c',\n          color: 'white',\n          border: 'none',\n          padding: '10px 20px',\n          borderRadius: '5px'\n        },\n        onClick: handlePredict,\n        children: \"Predict\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: predictions.map((word, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '5px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: selectedWord === word ? '#5bc0de' : 'transparent',\n            color: selectedWord === word ? 'white' : '#333',\n            border: 'none',\n            cursor: 'pointer',\n            padding: '5px 10px',\n            borderRadius: '5px'\n          },\n          onClick: () => handleWordClick(word),\n          children: word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: isSpeaking ? '#d9534f' : '#5cb85c',\n          color: 'white',\n          border: 'none',\n          padding: '10px 20px',\n          borderRadius: '5px'\n        },\n        onClick: () => {\n          if (isSpeaking) {\n            stopSpeaking();\n          } else {\n            speakText(selectedWord);\n          }\n        },\n        children: isSpeaking ? 'Stop Speaking' : 'Speak'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 9\n  }, this);\n};\n_s(SignLanguageRecognition, \"76TRim+FviNTIaholjqL2/2B3SQ=\");\n_c = SignLanguageRecognition;\nexport default SignLanguageRecognition;\nvar _c;\n$RefreshReg$(_c, \"SignLanguageRecognition\");","map":{"version":3,"names":["React","useRef","useState","axios","jsxDEV","_jsxDEV","SignLanguageRecognition","_s","videoInput","setVideoInput","predictions","setPredictions","isSpeaking","setIsSpeaking","selectedWord","setSelectedWord","videoRef","speechSynthesisRef","window","speechSynthesis","utteranceRef","handleVideoChange","event","file","target","files","console","log","handlePredict","formData","FormData","Blob","append","alert","response","post","headers","data","error","speakText","text","current","SpeechSynthesisUtterance","speak","stopSpeaking","cancel","handleWordClick","word","style","marginTop","marginLeft","children","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","backgroundColor","color","border","padding","borderRadius","onClick","map","index","cursor","_c","$RefreshReg$"],"sources":["C:/Users/grish/OneDrive/Desktop/k/dslrbackup-main/src/components/SignLanguageRecognition.js"],"sourcesContent":["// import React, { useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const SignLanguageRecognition = () => {\n//     const [videoInput, setVideoInput] = useState(null);\n//     const [prediction, setPrediction] = useState('');\n//     const [isSpeaking, setIsSpeaking] = useState(false);\n\n//     const videoRef = useRef(null);\n//     const speechSynthesisRef = useRef(window.speechSynthesis);\n//     const utteranceRef = useRef(null);\n\n//     const handleVideoChange = (event) => {\n//         const file = event.target.files[0];\n//         setVideoInput(file);\n//         console.log(\"Video file selected: \", file);\n//     };\n\n//     const handlePredict = async () => {\n//         try {\n//             const formData = new FormData();\n//             if (videoInput instanceof Blob) {\n//                 formData.append('video', videoInput, 'video.webm');\n//                 console.log(\"Video blob appended to formData\");\n//             } else {\n//                 alert('Please provide a video input');\n//                 return;\n//             }\n\n//             console.log(\"Sending request to backend...\");\n//             const response = await axios.post('http://localhost:5000/predict', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data',\n//                 },\n//             });\n\n//             console.log(\"Response received: \", response.data);\n//             setPrediction(response.data.prediction);\n//             speakText(response.data.prediction);\n//         } catch (error) {\n//             console.error('Error predicting:', error);\n//         }\n//     };\n\n//     const speakText = (text) => {\n//         utteranceRef.current = new SpeechSynthesisUtterance(text);\n//         speechSynthesisRef.current.speak(utteranceRef.current);\n//         setIsSpeaking(true);\n//     };\n\n//     const stopSpeaking = () => {\n//         if (isSpeaking) {\n//             speechSynthesisRef.current.cancel();\n//             setIsSpeaking(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"container mt-5\">\n//             <h2 className=\"display-4 mb-4\">Sign Language Recognition</h2>\n//             <div className=\"mb-3\">\n//                 <label>Upload Video:</label>\n//                 <input type=\"file\" accept=\"video/*\" onChange={handleVideoChange} />\n//             </div>\n//             <div className=\"mb-3\">\n//                 <button className=\"btn btn-success\" onClick={handlePredict}>\n//                     Predict\n//                 </button>\n//             </div>\n//             {prediction && (\n//                 <div className=\"mt-3\">\n//                     <p>Prediction: {prediction}</p>\n//                     <button\n//                         className={`btn ${isSpeaking ? 'btn-danger' : 'btn-success'}`}\n//                         onClick={() => {\n//                             if (isSpeaking) {\n//                                 stopSpeaking();\n//                             } else {\n//                                 speakText(prediction);\n//                             }\n//                         }}\n//                     >\n//                         {isSpeaking ? 'Stop Speaking' : 'Speak'}\n//                     </button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default SignLanguageRecognition;\n// import React, { useRef, useState } from 'react';\n// import axios from 'axios';\n\n// const SignLanguageRecognition = () => {\n//     const [videoInput, setVideoInput] = useState(null);\n//     const [predictions, setPredictions] = useState([]);\n//     const [isSpeaking, setIsSpeaking] = useState(false);\n\n//     const videoRef = useRef(null);\n//     const speechSynthesisRef = useRef(window.speechSynthesis);\n//     const utteranceRef = useRef(null);\n\n//     const handleVideoChange = (event) => {\n//         const file = event.target.files[0];\n//         setVideoInput(file);\n//         console.log(\"Video file selected: \", file);\n//     };\n\n//     const handlePredict = async () => {\n//         try {\n//             const formData = new FormData();\n//             if (videoInput instanceof Blob) {\n//                 formData.append('video', videoInput, 'video.webm');\n//                 console.log(\"Video blob appended to formData\");\n//             } else {\n//                 alert('Please provide a video input');\n//                 return;\n//             }\n\n//             console.log(\"Sending request to backend...\");\n//             const response = await axios.post('http://localhost:5000/predict', formData, {\n//                 headers: {\n//                     'Content-Type': 'multipart/form-data',\n//                 },\n//             });\n\n//             console.log(\"Response received: \", response.data);\n//             setPredictions(response.data); // Update predictions with response data\n//             speakPredictions(response.data); // Speak the predicted words\n//         } catch (error) {\n//             console.error('Error predicting:', error);\n//         }\n//     };\n\n//     const speakPredictions = (predictions) => {\n//         if (predictions && predictions.length > 0) {\n//             predictions.forEach((prediction) => {\n//                 speakText(prediction);\n//             });\n//         }\n//     };\n\n//     const speakText = (text) => {\n//         utteranceRef.current = new SpeechSynthesisUtterance(text);\n//         speechSynthesisRef.current.speak(utteranceRef.current);\n//         setIsSpeaking(true);\n//     };\n\n//     const stopSpeaking = () => {\n//         if (isSpeaking) {\n//             speechSynthesisRef.current.cancel();\n//             setIsSpeaking(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"container mt-5\">\n//             <h2 className=\"display-4 mb-4\">Sign Language Recognition</h2>\n//             <div className=\"mb-3\">\n//                 <label>Upload Video:</label>\n//                 <input type=\"file\" accept=\"video/*\" onChange={handleVideoChange} />\n//             </div>\n//             <div className=\"mb-3\">\n//                 <button className=\"btn btn-success\" onClick={handlePredict}>\n//                     Predict\n//                 </button>\n//             </div>\n//             {predictions && predictions.length > 0 && (\n//                 <div className=\"mt-3\">\n//                     <p>Predicted Words:</p>\n//                     <ul>\n//                         {predictions.map((word, index) => (\n//                             <li key={index}>{word}</li>\n//                         ))}\n//                     </ul>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default SignLanguageRecognition;\nimport React, { useRef, useState } from 'react';\nimport axios from 'axios';\n\nconst SignLanguageRecognition = () => {\n    const [videoInput, setVideoInput] = useState(null);\n    const [predictions, setPredictions] = useState([]);\n    const [isSpeaking, setIsSpeaking] = useState(false);\n    const [selectedWord, setSelectedWord] = useState('');\n\n    const videoRef = useRef(null);\n    const speechSynthesisRef = useRef(window.speechSynthesis);\n    const utteranceRef = useRef(null);\n\n    const handleVideoChange = (event) => {\n        const file = event.target.files[0];\n        setVideoInput(file);\n        console.log(\"Video file selected: \", file);\n    };\n\n    const handlePredict = async () => {\n        try {\n            const formData = new FormData();\n            if (videoInput instanceof Blob) {\n                formData.append('video', videoInput, 'video.webm');\n                console.log(\"Video blob appended to formData\");\n            } else {\n                alert('Please provide a video input');\n                return;\n            }\n\n            console.log(\"Sending request to backend...\");\n            const response = await axios.post('http://localhost:5000/predict', formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            });\n\n            console.log(\"Response received: \", response.data);\n            setPredictions(response.data.predictions);\n        } catch (error) {\n            console.error('Error predicting:', error);\n        }\n    };\n\n    const speakText = (text) => {\n        utteranceRef.current = new SpeechSynthesisUtterance(text);\n        speechSynthesisRef.current.speak(utteranceRef.current);\n        setIsSpeaking(true);\n    };\n\n    const stopSpeaking = () => {\n        if (isSpeaking) {\n            speechSynthesisRef.current.cancel();\n            setIsSpeaking(false);\n        }\n    };\n\n    const handleWordClick = (word) => {\n        setSelectedWord(word);\n    };\n\n    return (\n        <div style={{ marginTop: '20px', marginLeft: '20px' }}>\n            <h2 style={{ marginBottom: '20px' }}>Sign Language Recognition</h2>\n            <div style={{ marginBottom: '10px' }}>\n                <label>Upload Video:</label>\n                <input type=\"file\" accept=\"video/*\" onChange={handleVideoChange} />\n            </div>\n            <div style={{ marginBottom: '10px' }}>\n                <button style={{ backgroundColor: '#5cb85c', color: 'white', border: 'none', padding: '10px 20px', borderRadius: '5px' }} onClick={handlePredict}>\n                    Predict\n                </button>\n            </div>\n            <div>\n                {predictions.map((word, index) => (\n                    <div key={index} style={{ marginBottom: '5px' }}>\n                        <button\n                            style={{\n                                backgroundColor: selectedWord === word ? '#5bc0de' : 'transparent',\n                                color: selectedWord === word ? 'white' : '#333',\n                                border: 'none',\n                                cursor: 'pointer',\n                                padding: '5px 10px',\n                                borderRadius: '5px',\n                            }}\n                            onClick={() => handleWordClick(word)}\n                        >\n                            {word}\n                        </button>\n                    </div>\n                ))}\n            </div>\n            <div style={{ marginTop: '10px' }}>\n                <button\n                    style={{\n                        backgroundColor: isSpeaking ? '#d9534f' : '#5cb85c',\n                        color: 'white',\n                        border: 'none',\n                        padding: '10px 20px',\n                        borderRadius: '5px',\n                    }}\n                    onClick={() => {\n                        if (isSpeaking) {\n                            stopSpeaking();\n                        } else {\n                            speakText(selectedWord);\n                        }\n                    }}\n                >\n                    {isSpeaking ? 'Stop Speaking' : 'Speak'}\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default SignLanguageRecognition;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMc,QAAQ,GAAGf,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMgB,kBAAkB,GAAGhB,MAAM,CAACiB,MAAM,CAACC,eAAe,CAAC;EACzD,MAAMC,YAAY,GAAGnB,MAAM,CAAC,IAAI,CAAC;EAEjC,MAAMoB,iBAAiB,GAAIC,KAAK,IAAK;IACjC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClChB,aAAa,CAACc,IAAI,CAAC;IACnBG,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEJ,IAAI,CAAC;EAC9C,CAAC;EAED,MAAMK,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/B,IAAItB,UAAU,YAAYuB,IAAI,EAAE;QAC5BF,QAAQ,CAACG,MAAM,CAAC,OAAO,EAAExB,UAAU,EAAE,YAAY,CAAC;QAClDkB,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAClD,CAAC,MAAM;QACHM,KAAK,CAAC,8BAA8B,CAAC;QACrC;MACJ;MAEAP,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC5C,MAAMO,QAAQ,GAAG,MAAM/B,KAAK,CAACgC,IAAI,CAAC,+BAA+B,EAAEN,QAAQ,EAAE;QACzEO,OAAO,EAAE;UACL,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MAEFV,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEO,QAAQ,CAACG,IAAI,CAAC;MACjD1B,cAAc,CAACuB,QAAQ,CAACG,IAAI,CAAC3B,WAAW,CAAC;IAC7C,CAAC,CAAC,OAAO4B,KAAK,EAAE;MACZZ,OAAO,CAACY,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IAC7C;EACJ,CAAC;EAED,MAAMC,SAAS,GAAIC,IAAI,IAAK;IACxBpB,YAAY,CAACqB,OAAO,GAAG,IAAIC,wBAAwB,CAACF,IAAI,CAAC;IACzDvB,kBAAkB,CAACwB,OAAO,CAACE,KAAK,CAACvB,YAAY,CAACqB,OAAO,CAAC;IACtD5B,aAAa,CAAC,IAAI,CAAC;EACvB,CAAC;EAED,MAAM+B,YAAY,GAAGA,CAAA,KAAM;IACvB,IAAIhC,UAAU,EAAE;MACZK,kBAAkB,CAACwB,OAAO,CAACI,MAAM,CAAC,CAAC;MACnChC,aAAa,CAAC,KAAK,CAAC;IACxB;EACJ,CAAC;EAED,MAAMiC,eAAe,GAAIC,IAAI,IAAK;IAC9BhC,eAAe,CAACgC,IAAI,CAAC;EACzB,CAAC;EAED,oBACI1C,OAAA;IAAK2C,KAAK,EAAE;MAAEC,SAAS,EAAE,MAAM;MAAEC,UAAU,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAClD9C,OAAA;MAAI2C,KAAK,EAAE;QAAEI,YAAY,EAAE;MAAO,CAAE;MAAAD,QAAA,EAAC;IAAyB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnEnD,OAAA;MAAK2C,KAAK,EAAE;QAAEI,YAAY,EAAE;MAAO,CAAE;MAAAD,QAAA,gBACjC9C,OAAA;QAAA8C,QAAA,EAAO;MAAa;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC5BnD,OAAA;QAAOoD,IAAI,EAAC,MAAM;QAACC,MAAM,EAAC,SAAS;QAACC,QAAQ,EAAEtC;MAAkB;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClE,CAAC,eACNnD,OAAA;MAAK2C,KAAK,EAAE;QAAEI,YAAY,EAAE;MAAO,CAAE;MAAAD,QAAA,eACjC9C,OAAA;QAAQ2C,KAAK,EAAE;UAAEY,eAAe,EAAE,SAAS;UAAEC,KAAK,EAAE,OAAO;UAAEC,MAAM,EAAE,MAAM;UAAEC,OAAO,EAAE,WAAW;UAAEC,YAAY,EAAE;QAAM,CAAE;QAACC,OAAO,EAAErC,aAAc;QAAAuB,QAAA,EAAC;MAElJ;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eACNnD,OAAA;MAAA8C,QAAA,EACKzC,WAAW,CAACwD,GAAG,CAAC,CAACnB,IAAI,EAAEoB,KAAK,kBACzB9D,OAAA;QAAiB2C,KAAK,EAAE;UAAEI,YAAY,EAAE;QAAM,CAAE;QAAAD,QAAA,eAC5C9C,OAAA;UACI2C,KAAK,EAAE;YACHY,eAAe,EAAE9C,YAAY,KAAKiC,IAAI,GAAG,SAAS,GAAG,aAAa;YAClEc,KAAK,EAAE/C,YAAY,KAAKiC,IAAI,GAAG,OAAO,GAAG,MAAM;YAC/Ce,MAAM,EAAE,MAAM;YACdM,MAAM,EAAE,SAAS;YACjBL,OAAO,EAAE,UAAU;YACnBC,YAAY,EAAE;UAClB,CAAE;UACFC,OAAO,EAAEA,CAAA,KAAMnB,eAAe,CAACC,IAAI,CAAE;UAAAI,QAAA,EAEpCJ;QAAI;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD;MAAC,GAbHW,KAAK;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAcV,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNnD,OAAA;MAAK2C,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAE,QAAA,eAC9B9C,OAAA;QACI2C,KAAK,EAAE;UACHY,eAAe,EAAEhD,UAAU,GAAG,SAAS,GAAG,SAAS;UACnDiD,KAAK,EAAE,OAAO;UACdC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE,WAAW;UACpBC,YAAY,EAAE;QAClB,CAAE;QACFC,OAAO,EAAEA,CAAA,KAAM;UACX,IAAIrD,UAAU,EAAE;YACZgC,YAAY,CAAC,CAAC;UAClB,CAAC,MAAM;YACHL,SAAS,CAACzB,YAAY,CAAC;UAC3B;QACJ,CAAE;QAAAqC,QAAA,EAEDvC,UAAU,GAAG,eAAe,GAAG;MAAO;QAAAyC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACjD,EAAA,CA/GID,uBAAuB;AAAA+D,EAAA,GAAvB/D,uBAAuB;AAiH7B,eAAeA,uBAAuB;AAAC,IAAA+D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}